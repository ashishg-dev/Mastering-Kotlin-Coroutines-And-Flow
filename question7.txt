What is a Coroutine Dispatcher?
In Kotlin Coroutines, a Coroutine Dispatcher is a component of the coroutine context that defines the threading model or execution context of a coroutine.
It controls which thread or thread pool the coroutine will execute on. A dispatcher allows you to control the parallelism and 
scheduling of coroutines by specifying where the work should be done—whether on the main thread, a background thread, or a custom thread pool.

The dispatcher is one of the most important components when managing concurrency in Kotlin Coroutines. It helps decide the threading behavior for the coroutine's execution. 
This is crucial for optimizing performance, controlling I/O tasks, and ensuring proper thread usage (e.g., UI tasks should run on the main thread).

Common Dispatchers:

Dispatchers.Main:  Runs coroutines on the main thread (UI thread) in Android. Use this dispatcher for updating the UI.  Only update the UI from the main thread.   

Dispatchers.IO:  Optimized for blocking input/output operations, such as network requests, file access, and database interactions.  Use this for operations that might take some time and would block the current thread if done directly.  Dispatchers.IO uses a thread pool to handle these operations concurrently.   

Dispatchers.Default:  Used for CPU-intensive tasks. If you have a coroutine that performs a lot of calculations, use this dispatcher. It uses a shared thread pool.   

Dispatchers.Unconfined:  Starts the coroutine in whatever thread it happens to be in when it's resumed.  Use with extreme caution.  It can lead to unpredictable behavior because the coroutine might switch threads multiple times during its execution.  Generally, avoid this dispatcher unless you have a very specific reason and understand the implications.   

Threading and Dispatchers in Kotlin Coroutines
When you create a coroutine using Kotlin Coroutines, the dispatcher controls where the coroutine runs. The threading model is abstracted away,
but the dispatcher helps you control which threads or thread pools the coroutine should run on.

Thread: Represents a specific execution unit that runs in the system. Threads can be either main (UI thread) or background (worker thread).
Dispatcher: A high-level abstraction that controls which thread or thread pool a coroutine uses. The dispatcher allows you to configure the environment where your coroutines run,
thus enabling better thread management and more efficient parallelism.
