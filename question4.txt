

4 - Types of Coroutine Scopes:

Kotlin provides several built-in coroutine scopes, and you can also create your own:   

GlobalScope: This scope is for coroutines that should live for the entire lifetime of the application.
Use it sparingly, as coroutines launched in GlobalScope are not automatically cancelled when activities or fragments are destroyed.   

viewModelScope (Android): This scope is specifically designed for Android ViewModels. Coroutines launched in this scope are automatically cancelled when the ViewModel is cleared.
This is the preferred scope for coroutines that are related to a ViewModel's work.   

lifecycleScope (Android):  This scope is for tying coroutines to the lifecycle of an Android LifecycleOwner (like an Activity or Fragment).
Coroutines launched in this scope are automatically cancelled when the LifecycleOwner reaches a certain state (like onDestroy for an Activity or Fragment).   

CoroutineScope(SupervisorJob() + Dispatchers.Main.immediate): You can create your own custom scope using the CoroutineScope builder function.
The SupervisorJob() is important as it allows other coroutines within the same scope to continue running even if one of them fails.   


Key Points:
Always use a coroutine scope to manage the lifecycle of your coroutines.
Choose the scope that best fits the component launching the coroutines.
Avoid using GlobalScope unless you have a very specific reason.
Use viewModelScope for coroutines in ViewModels and lifecycleScope for coroutines in Activities or Fragments.
