
1 - What are Kotlin Coroutines, and how are they different from traditional threading?
  Kotlin Coroutines are a powerful feature of the Kotlin programming language that simplifies asynchronous programming and concurrency.
  (concurrency is about dealing with multiple tasks at once, and asynchronous is a way to handle tasks so they don’t block each other while waiting.)
  They provide a way to perform tasks like network requests, database queries, or other time-consuming operations without blocking the main thread, thus preventing UI freezes or lag. 

Why Coroutines? (The Problem with Traditional Threads)
  Imagine the waiter as a person who can take multiple orders at once, but instead of standing idle while waiting for food, they can move on to the next task.
  They might take another customer's order, bring drinks, or check on a different table, all while still waiting for food from the kitchen.
  
  In a traditional thread-based model, the waiter would just stand there waiting for food, which is inefficient.
  But in the coroutine-based approach, the waiter (coroutine) can "pause" their waiting for food (without blocking a thread) and perform other tasks, optimizing their time.

Kotlin Coroutines differ from traditional threading in several key ways, making them more efficient, lightweight, and easier to manage. Here's a comparison between the two:

1. Lightweight vs Heavyweight
  Threads: A traditional thread are relatively expensive to create and manage. Each thread typically requires its own memory and stack space.
  Coroutines: Coroutines are lightweight. They are managed by the Kotlin runtime and run on a limited number of threads. Coroutines share threads, meaning many coroutines can run on a single thread.
  This drastically reduces memory usage and overhead.
  
  Example:
    Threads require the OS to allocate separate memory stacks.
    Coroutines are just a continuation of the code execution and are managed by the Kotlin runtime, leading to far less memory consumption.

2. Blocking vs Non-blocking
  Threads: When you use threads for concurrency, the traditional model involves blocking the thread while waiting for a task (e.g., network I/O, database query).
  This means if a thread is waiting for data, it can’t do anything else, and you might have many idle threads.
  Coroutines: Coroutines don't block the thread. Instead of blocking, coroutines can suspend at specific points and resume later without holding onto a thread, making them highly efficient for I/O-bound tasks.
  The underlying thread is released when the coroutine suspends, allowing other tasks to run.

  Example:
    Threads might block the thread during a network request, which could lead to thread exhaustion in a server with many concurrent requests.
    Coroutines suspend the execution while waiting for a response, freeing up the thread for other work.

3. Concurrency vs Parallelism
  Threads: Threads are often used for parallel execution each thread can run on a different CPU core (if available). This is great for CPU-bound tasks but can cause high context-switching and synchronization overhead.
  Coroutines: Coroutines provide concurrency, not parallelism, in most cases. They allow you to run many tasks in a non-blocking way, but these tasks might share the same thread.
  Coroutines can run on a limited number of threads, allowing for high concurrency with less overhead. They’re especially suited for I/O-bound tasks where the task frequently suspends (e.g., waiting for a network response).

  Example:
    Threads can run in parallel on multiple CPU cores, perfect for heavy calculations.
    Coroutines run concurrently, using a small number of threads, but are more efficient for tasks that spend a lot of time waiting (like network calls).

4. Context Switching
  Threads: When multiple threads are running on a single CPU core, the operating system’s kernel performs context switching,
  which involves saving the state of the current thread and restoring the state of another thread.This is expensive in terms of CPU time and memory.
  Coroutines: Coroutines don’t require kernel-level context switching. When a coroutine suspends,
  it simply saves its state in user space and resumes without involving the OS scheduler. This results in minimal overhead and fast switching.

  Example:
    Threads may involve significant context-switching costs when you have many threads.
    Coroutines have near-zero overhead when switching between tasks.

5. Synchronization
  Threads: Managing synchronization in multithreading is more complex. You often need locks, semaphores, and other mechanisms to avoid issues like race conditions, deadlocks, and data corruption.
  Coroutines: Kotlin provides built-in mechanisms to manage concurrency within coroutines, such as Mutex for mutual exclusion. Moreover, the structured concurrency model in Kotlin ensures that coroutines are easier to manage and cancel without the risk of inconsistent states.

Example:
  With threads, you may need to use synchronized blocks or locks to ensure thread safety.
  With coroutines, the suspend function guarantees that a task is safely suspended and resumed, and structured concurrency ensures proper cleanup.

6. Lifecycle Management
Threads: Traditional threads are independent of each other. Managing their lifecycle (creating, waiting for completion, and handling errors) is more cumbersome and prone to errors.
Coroutines: Coroutines are managed by a scope, which controls their lifecycle. If a coroutine is launched within a scope, it will automatically be cancelled when the scope is cancelled,
ensuring that no tasks are left running unexpectedly (avoiding resource leaks).

Example:
  Threads may require manual management and explicit join() calls to wait for their completion.
  Coroutines can be managed in scopes, and if the scope is cancelled (like when a user navigates away from a screen), all coroutines within that scope are cancelled automatically.

7. Error Handling
  Threads: Error handling in multithreading can be difficult, especially when one thread fails and you need to propagate the exception or handle it in the main thread. You may need to rely on complex mechanisms like Thread.setUncaughtExceptionHandler.
  Coroutines: Coroutines provide structured exception handling. Errors in a coroutine can be caught using standard try-catch blocks, and the coroutine’s scope can handle cancellation and exceptions cleanly.

Example:
  With threads, exceptions can be hard to propagate and manage.
  With coroutines, exceptions are handled in the coroutine itself or in the scope where the coroutine is launched.

Summary:
Threads are heavier, suitable for CPU-bound tasks, and require manual management of synchronization, context switching, and error handling.
Coroutines are lightweight, more efficient for I/O-bound tasks, allow non-blocking asynchronous programming, and offer structured concurrency, making them easier to manage.


