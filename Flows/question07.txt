7 - What is the difference between StateIn and ShareIn?

`stateIn` and `shareIn` are operators used to convert a Flow into a hot flow that can be shared among multiple collectors.
Both are commonly used for transforming cold flows into hot flows that keep data in memory and emit it to multiple subscribers.

StateIn
StateIn is used to create a StateFlow from a Flow that keeps the latest value emitted and
allows collectors to observe that state in a lifecycle-aware way.
It behaves similarly to a LiveData object, in that it always holds a single value (the most recent one).

Purpose: It’s used when you want to convert a Flow into a StateFlow, which is a special kind of Flow that holds a single, current state.
Behavior: StateIn starts with an initial value and updates whenever the Flow emits new values. The latest value can be accessed and observed directly.
Use case: It’s ideal for representing UI state, where the state is always current and needs to be observed by the UI.

// Simulate a repository flow that fetches users
    private val userFlow = flow {
        emit(UiState.Loading)
        delay(2000) // Simulate network delay
        emit(UiState.Success(listOf("Alice", "Bob", "Charlie"))) // Simulated data
    }

    // Convert the userFlow to StateFlow using stateIn
    val uiState: StateFlow<UiState> = userFlow
        .stateIn(
            scope = viewModelScope,                // Use viewModelScope to manage lifecycle
            started = SharingStarted.WhileSubscribed(5000), // Start when UI subscribes and stop when inactive
            initialValue = UiState.Loading         // Initial state while loading data
        )

ShareIn
ShareIn is used to convert a Flow into a SharedFlow, allowing multiple collectors to observe the flow's emissions.
It doesn’t retain a single state, but instead broadcasts values to all active collectors.
The shared flow can be configured to start sharing values lazily or immediately.

Purpose: It’s used to convert a Flow into a SharedFlow, allowing multiple collectors to receive the same values emitted by the flow.
Behavior: Unlike StateIn, ShareIn doesn’t retain the latest value. It just shares emissions with multiple consumers.
It’s more about event propagation rather than holding state.
Use case: It’s useful when you need to broadcast events to multiple consumers or subscribers, such as a button click, navigation events, or other transient actions.

private val notificationFlow = flow {
        var notificationCount = 1
        while (true) {
            emit("Notification #$notificationCount")
            notificationCount++
            delay(2000) // Emit a notification every 2 seconds
        }
    }

    // Convert the notification flow to a SharedFlow with a replay of the last 2 notifications
    val sharedNotifications: SharedFlow<String> = notificationFlow
        .shareIn(
            scope = viewModelScope,                         // Start and manage in viewModelScope
            started = SharingStarted.WhileSubscribed(5000), // Keep active while subscribed
            replay = 2                                      // Replay the last 2 notifications to new subscribers
        )
