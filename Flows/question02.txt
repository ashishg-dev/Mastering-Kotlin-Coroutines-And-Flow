In Kotlin Flow, flow builders are functions used to create a Flow instance.
These builders define how data is emitted from a flow and can be used to create different types of asynchronous streams.

Here are the main types of Flow builders in Kotlin:
1. flow {} (Basic Flow Builder)
This is the most common flow builder used to create a flow that emits a sequence of values.
It allows you to emit values inside a coroutine using the emit() function.

fun simpleFlow(): Flow<Int> = flow {
    for (i in 1..5) {
        delay(1000)  // Simulating work
        emit(i)      // Emit the value
    }
}

fun main() = runBlocking {
    simpleFlow().collect { value ->
        println("Received: $value")
    }
}

2. flowOf() (Flow Builder for Known Values)
The flowOf() builder is a specialized version of flow that creates a flow that emits a fixed set of values.
It's a shorthand for creating flows that emit a small number of values.

fun simpleFlowOf(): Flow<Int> = flowOf(1, 2, 3, 4, 5)

fun main() = runBlocking {
    simpleFlowOf().collect { value ->
        println("Received: $value")
    }
}

3. asFlow() (Converting Collections to Flow)
asFlow() is an extension function for Iterable and Array that converts them into a flow.
Each element of the collection is emitted as a separate value in the flow.

fun simpleAsFlow(): Flow<Int> = listOf(1, 2, 3, 4, 5).asFlow()

fun main() = runBlocking {
    simpleAsFlow().collect { value ->
        println("Received: $value")
    }
}

4. callbackFlow {} (Flow Builder for Callback-based APIs)
callbackFlow is used to create a flow from a callback-based API (such as those commonly used in Android or Java).
It allows you to create a flow from an asynchronous callback that emits values using trySend().

fun getLocationFlow(): Flow<Location> {
    return callbackFlow {

        val locationListener = object : LocationListener {

            override fun onLocationUpdate(location: Location) {
                trySend(location)
            }

        }

        LocationManager.registerForLocation(locationListener)

        awaitClose {
            LocationManager.unregisterForLocation(locationListener)
        }

    }
}

launch {
    getLocationFlow()
    .collect { location ->
        // do something with the updated location
    }
}

5. channelFlow {} (Flow Builder for Channels)
channelFlow is similar to callbackFlow, but it specifically deals with channels 
and can be used when multiple values need to be sent concurrently via channels. 
It helps to create flows that emit multiple values asynchronously through channels.

fun channelFlowExample(): Flow<Int> = channelFlow {
    // Launch a coroutine to simulate multiple concurrent emissions
    launch {
        delay(1000)
        send(1)
    }
    launch {
        delay(1500)
        send(2)
    }
    launch {
        delay(500)
        send(3)
    }

    // Ensure that the flow is closed after all sending
    awaitClose { /* Clean up resources if necessary */ }
}

fun main() = runBlocking {
    channelFlowExample().collect { value ->
        println("Received: $value")
    }
}

