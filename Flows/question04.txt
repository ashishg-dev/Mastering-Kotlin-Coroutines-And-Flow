4 - Difference between launchIn vs collect in kotlin flow?

In Kotlin Flow, both launchIn() and collect() are used to start collecting values from a flow,
but they are used in different contexts and have distinct behaviors. Here's a detailed explanation of the differences:

1. collect()
Usage: collect() is the primary method used to collect values from a flow.
It suspends the coroutine and starts collecting the flow's emitted values.

Context: collect() is a suspending function, meaning it must be called from a coroutine or another suspending function.
It starts the flow's collection and blocks the current coroutine until the flow is completed or canceled.

Behavior:
The flow starts emitting values only when collect() is called.
It collects all values and processes them sequentially.
It suspends the current coroutine, meaning the execution will not proceed beyond the collect() call until the flow completes or is canceled.

2. launchIn()
Usage: launchIn() is used to launch the collection of a flow in a new coroutine and 
is commonly used when you don't want to block the current coroutine. 
Itâ€™s typically used in conjunction with operators like onEach, map, etc.,
to perform actions on each value emitted by the flow.

Context: launchIn() is called on a flow to start collection in a different coroutine scope, often used in a UI or background thread. 
It doesn't block the calling function and instead launches a new coroutine to handle the flow collection.

Behavior:
launchIn() is not a suspending function, meaning it does not block the caller.
It starts the flow collection in a separate coroutine and runs concurrently.
The flow will emit values, and the code inside launchIn() will run asynchronously on that coroutine.


 - Using collect() to block execution:
fun main() = runBlocking {
    simpleFlow().collect { value ->
        println("Processing value: $value")
    }
    println("Flow collection completed")
}

Here, the collection will block until all values are emitted. After that, "Flow collection completed" will be printed.

- Using launchIn() to collect asynchronously:
fun main() = runBlocking {
    simpleFlow()
        .onEach { value -> println("Processing value: $value") }
        .launchIn(this) // Collect asynchronously in the same scope

    println("Main coroutine is not blocked")
}

The launchIn(this) call starts the collection in a separate coroutine and does not block the main coroutine.
"Main coroutine is not blocked" will be printed immediately.

In summary:
collect() is used when you need to synchronously collect and process data.
launchIn() is used when you want to asynchronously collect data, often without blocking the calling thread or coroutine.

